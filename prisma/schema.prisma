// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int     @id @default(autoincrement())
  clerkId         String  @unique
  role            String  @default("student")
  clerkAttributes Json?
  tierId          String? @default("Free")

  tier Tier? @relation(fields: [tierId], references: [id])

  enrolled Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tierId])
}

model Course {
  id     String @id @default(uuid())
  userId String //this is from clerk
  title  String @unique @db.Text
  code   String @unique @db.Text

  enroll      Boolean?     @default(false)
  enrollments Enrollment[]
  description String?      @db.Text
  imageUrl    String?      @db.Text
  isPublished Boolean      @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  tierId String?
  tier   Tier?   @relation(fields: [tierId], references: [id])

  quizzes Quiz[]

  chapters    Chapter[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([tierId])
}

model Enrollment {
  id       Int    @id @default(autoincrement())
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Quiz {
  id        String     @id @default(uuid())
  title     String
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
}

model Question {
  id      String @id @default(uuid())
  text    String
  options Json // Storing options as JSON, including the correct answer
  quizId  String
  quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([quizId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  tier             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Tier {
  id          String @id @default(uuid())
  description String
  price       Float // The price for this tier

  users   User[]
  courses Course[]
}
